#include "CWall.h"
using namespace glm;
CWall::CWall()
{
    positionX = 10;
    positionY = 1;
    color = DEFAULT;
    width = 0.5;
    //height = 6;
    height = 2;
    front = 0;

    verticesSize = 0;
}

CWall::~CWall()
{

}

void CWall::setWallPositionX(float positionX)
{
    this->positionX = positionX;
}

float CWall::getWallPositionX()
{
    return positionX;
}

void CWall::setWallPositionY(float positionY)
{
    this->positionY = positionY;
}

float CWall::getWallPositionY()
{
    return positionY;
}

void CWall::setWallColor(int color)
{
    this->color = color;
}

int CWall::getWallColor()
{
    return color;
}

float CWall::getWallWidth()
{
    return width;
}

float CWall::getWallHeight()
{
    return height;
}

void CWall::setFront(int front)
{
    this->front = front;
}

int CWall::getFront()
{
    return front;
}

void CWall::draw(GLuint program, unsigned int VAO, unsigned int VBO)
{

    //std::cout << " size " << sizeof(verticesArr) / sizeof(float) << std::endl;

    //setVertices();
    //mooncine@hanmail.net
    //glm::vec3 cubePositions[] = {
    //    glm::vec3(0.0f,  0.0f,  0.0f),
    //    glm::vec3(-1.3f,  1.0f, -1.5f)
    //};

    glUseProgram(program); //draw 3 vertices as triangles 

    //glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); //use the created program 
    std::cout << getVertices()[215] << std::endl;


    //unsigned int VBO, VAO;
    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);

    glBindVertexArray(VAO);

    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, verticesSize, getVertices(), GL_STATIC_DRAW);

    // position attribute
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);
    // color attribute
    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)(3 * sizeof(float)));
    glEnableVertexAttribArray(1);


    ////////////본격적인 조작은 이 아래에서 부터//////////////////////


    ///이렇게가
    mat4 view = mat4(1.0f);
    //view = rotate(view, radians(45.0f), vec3(1.0f, 0.0f, 1.0f));
    int viewLoc = glGetUniformLocation(program, "view");
    glUniformMatrix4fv(viewLoc, 1, GL_FALSE, value_ptr(view));
    ///한 세트.

    mat4 projection = mat4(1.0f);
    //projection = perspective(radians(45.0f), 1.5f, 0.1f, 100.0f);
    projection = ortho(-3.0f, 3.0f, -2.0f, 2.0f, -2.0f, 2.0f);

    int projectionLoc = glGetUniformLocation(program, "projection");
    glUniformMatrix4fv(projectionLoc, 1, GL_FALSE, value_ptr(projection));

    glBindVertexArray(VAO);


    mat4 model = mat4(1.0f);
    if (color == DEFAULT || color == JUMP) {
        model = translate(model, vec3(positionX, -0.6f, 1.5f));
        model = scale(model, vec3(1.8, 8.0, 1.8));
    }
    else {
        model = translate(model, vec3(positionX, -0.6f, 1.5f));
        model = rotate(model, radians(90.0f), vec3(0.0, 1.0, 0.0));

        model = scale(model, vec3(1.8, 2.5, 1.8));
    }

    //model = rotate(model, radians(45.0f), vec3(1.0f, 0.3f, 0.5f));
    int modelLoc = glGetUniformLocation(program, "model");
    glUniformMatrix4fv(modelLoc, 1, GL_FALSE, value_ptr(model));

    glDrawArrays(GL_TRIANGLES, 0, verticesSize / 24);



}

void CWall::setVertices(int size)
{
}

float* CWall::getVertices()
{
    return this->vertices;
}

void CWall::setWall(int pose)
{
    switch (pose) {
    case RED: {//+ 모양 
        float vertices1[] = {
            //가운데
 -0.1f, -0.1f, -0.1f,  1.0f, 0.0f, 0.0f,
 0.1f, -0.1f, -0.1f,  1.0f, 0.0f, 0.0f,
 0.1f,  0.1f, -0.1f,  1.0f, 0.0f, 0.0f,
 0.1f,  0.1f, -0.1f,  1.0f, 0.0f, 0.0f,
-0.1f,  0.1f, -0.1f,  1.0f, 0.0f, 0.0f,
-0.1f, -0.1f, -0.1f,  1.0f, 0.0f, 0.0f,

-0.1f, -0.1f,  0.1f,  0.6f, 0.0f, 0.0f,
 0.1f, -0.1f,  0.1f,  0.6f, 0.0f, 0.0f,
 0.1f,  0.1f,  0.1f,  0.6f, 0.0f, 0.0f,
 0.1f,  0.1f,  0.1f,  0.6f, 0.0f, 0.0f,
-0.1f,  0.1f,  0.1f,  0.6f, 0.0f, 0.0f,
-0.1f, -0.1f,  0.1f,  0.6f, 0.0f, 0.0f,

-0.1f,  0.1f,  0.1f,  0.8f, 0.0f, 0.0f,
-0.1f,  0.1f, -0.1f,  0.8f, 0.0f, 0.0f,
-0.1f, -0.1f, -0.1f,  0.8f, 0.0f, 0.0f,
-0.1f, -0.1f, -0.1f,  0.8f, 0.0f, 0.0f,
-0.1f, -0.1f,  0.1f,  0.8f, 0.0f, 0.0f,
-0.1f,  0.1f,  0.1f,  0.8f, 0.0f, 0.0f,

 0.1f,  0.1f,  0.1f,  0.7f, 0.0f, 0.0f,
 0.1f,  0.1f, -0.1f,  0.7f, 0.0f, 0.0f,
 0.1f, -0.1f, -0.1f,  0.7f, 0.0f, 0.0f,
 0.1f, -0.1f, -0.1f,  0.7f, 0.0f, 0.0f,
 0.1f, -0.1f,  0.1f,  0.7f, 0.0f, 0.0f,
 0.1f,  0.1f,  0.1f,  0.7f, 0.0f, 0.0f,

-0.1f, -0.1f, -0.1f,  0.9f, 0.0f, 0.0f,
 0.1f, -0.1f, -0.1f,  0.9f, 0.0f, 0.0f,
 0.1f, -0.1f,  0.1f,  0.9f, 0.0f, 0.0f,
 0.1f, -0.1f,  0.1f,  0.9f, 0.0f, 0.0f,
-0.1f, -0.1f,  0.1f,  0.9f, 0.0f, 0.0f,
-0.1f, -0.1f, -0.1f,  0.9f, 0.0f, 0.0f,

-0.1f,  0.1f, -0.1f,  0.5f, 0.0f, 0.0f,
 0.1f,  0.1f, -0.1f,  0.5f, 0.0f, 0.0f,
 0.1f,  0.1f,  0.1f,  0.5f, 0.0f, 0.0f,
 0.1f,  0.1f,  0.1f,  0.5f, 0.0f, 0.0f,
-0.1f,  0.1f,  0.1f,  0.5f, 0.0f, 0.0f,
-0.1f,  0.1f, -0.1f,  0.5f, 0.0f, 0.0f,





//위
 -0.1f, 0.1f, -0.1f,  1.0f, 0.0f, 0.0f,
 0.1f, 0.1f, -0.1f,  1.0f, 0.0f, 0.0f,
 0.1f,  0.3f, -0.1f,  1.0f, 0.0f, 0.0f,
 0.1f,  0.3f, -0.1f,  1.0f, 0.0f, 0.0f,
-0.1f,  0.3f, -0.1f,  1.0f, 0.0f, 0.0f,
-0.1f, 0.1f, -0.1f,  1.0f, 0.0f, 0.0f,

-0.1f, 0.1f,  0.1f,  0.6f, 0.0f, 0.0f,
 0.1f, 0.1f,  0.1f,  0.6f, 0.0f, 0.0f,
 0.1f,  0.3f,  0.1f,  0.6f, 0.0f, 0.0f,
 0.1f,  0.3f,  0.1f,  0.6f, 0.0f, 0.0f,
-0.1f,  0.3f,  0.1f,  0.6f, 0.0f, 0.0f,
-0.1f, 0.1f,  0.1f,  0.6f, 0.0f, 0.0f,

-0.1f,  0.3f,  0.1f,  0.8f, 0.0f, 0.0f,
-0.1f,  0.3f, -0.1f,  0.8f, 0.0f, 0.0f,
-0.1f, 0.1f, -0.1f,  0.8f, 0.0f, 0.0f,
-0.1f, 0.1f, -0.1f,  0.8f, 0.0f, 0.0f,
-0.1f, 0.1f,  0.1f,  0.8f, 0.0f, 0.0f,
-0.1f,  0.3f,  0.1f,  0.8f, 0.0f, 0.0f,

 0.1f,  0.3f,  0.1f,  0.7f, 0.0f, 0.0f,
 0.1f,  0.3f, -0.1f,  0.7f, 0.0f, 0.0f,
 0.1f, 0.1f, -0.1f,  0.7f, 0.0f, 0.0f,
 0.1f, 0.1f, -0.1f,  0.7f, 0.0f, 0.0f,
 0.1f, 0.1f,  0.1f,  0.7f, 0.0f, 0.0f,
 0.1f,  0.3f,  0.1f,  0.7f, 0.0f, 0.0f,

-0.1f, 0.1f, -0.1f,  0.9f, 0.0f, 0.0f,
 0.1f, 0.1f, -0.1f,  0.9f, 0.0f, 0.0f,
 0.1f, 0.1f,  0.1f,  0.9f, 0.0f, 0.0f,
 0.1f, 0.1f,  0.1f,  0.9f, 0.0f, 0.0f,
-0.1f, 0.1f,  0.1f,  0.9f, 0.0f, 0.0f,
-0.1f, 0.1f, -0.1f,  0.9f, 0.0f, 0.0f,

-0.1f,  0.3f, -0.1f,  0.5f, 0.0f, 0.0f,
 0.1f,  0.3f, -0.1f,  0.5f, 0.0f, 0.0f,
 0.1f,  0.3f,  0.1f,  0.5f, 0.0f, 0.0f,
 0.1f,  0.3f,  0.1f,  0.5f, 0.0f, 0.0f,
-0.1f,  0.3f,  0.1f,  0.5f, 0.0f, 0.0f,
-0.1f,  0.3f, -0.1f,  0.5f, 0.0f, 0.0f,


//아래
 -0.1f, -0.3f, -0.1f,  1.0f, 0.0f, 0.0f,
 0.1f, -0.3f, -0.1f,  1.0f, 0.0f, 0.0f,
 0.1f,  -0.1f, -0.1f,  1.0f, 0.0f, 0.0f,
 0.1f,  -0.1f, -0.1f,  1.0f, 0.0f, 0.0f,
-0.1f,  -0.1f, -0.1f,  1.0f, 0.0f, 0.0f,
-0.1f, -0.3f, -0.1f,  1.0f, 0.0f, 0.0f,

-0.1f, -0.3f,  0.1f,  0.6f, 0.0f, 0.0f,
 0.1f, -0.3f,  0.1f,  0.6f, 0.0f, 0.0f,
 0.1f,  -0.1f,  0.1f,  0.6f, 0.0f, 0.0f,
 0.1f,  -0.1f,  0.1f,  0.6f, 0.0f, 0.0f,
-0.1f,  -0.1f,  0.1f,  0.6f, 0.0f, 0.0f,
-0.1f, -0.3f,  0.1f,  0.6f, 0.0f, 0.0f,

-0.1f,  -0.1f,  0.1f,  0.8f, 0.0f, 0.0f,
-0.1f,  -0.1f, -0.1f,  0.8f, 0.0f, 0.0f,
-0.1f, -0.3f, -0.1f,  0.8f, 0.0f, 0.0f,
-0.1f, -0.3f, -0.1f,  0.8f, 0.0f, 0.0f,
-0.1f, -0.3f,  0.1f,  0.8f, 0.0f, 0.0f,
-0.1f,  -0.1f,  0.1f,  0.8f, 0.0f, 0.0f,

 0.1f,  -0.1f,  0.1f,  0.7f, 0.0f, 0.0f,
 0.1f,  -0.1f, -0.1f,  0.7f, 0.0f, 0.0f,
 0.1f, -0.3f, -0.1f,  0.7f, 0.0f, 0.0f,
 0.1f, -0.3f, -0.1f,  0.7f, 0.0f, 0.0f,
 0.1f, -0.3f,  0.1f,  0.7f, 0.0f, 0.0f,
 0.1f,  -0.1f,  0.1f,  0.7f, 0.0f, 0.0f,

-0.1f, -0.3f, -0.1f,  0.9f, 0.0f, 0.0f,
 0.1f, -0.3f, -0.1f,  0.9f, 0.0f, 0.0f,
 0.1f, -0.3f,  0.1f,  0.9f, 0.0f, 0.0f,
 0.1f, -0.3f,  0.1f,  0.9f, 0.0f, 0.0f,
-0.1f, -0.3f,  0.1f,  0.9f, 0.0f, 0.0f,
-0.1f, -0.3f, -0.1f,  0.9f, 0.0f, 0.0f,

-0.1f,  -0.1f, -0.1f,  0.5f, 0.0f, 0.0f,
 0.1f,  -0.1f, -0.1f,  0.5f, 0.0f, 0.0f,
 0.1f,  -0.1f,  0.1f,  0.5f, 0.0f, 0.0f,
 0.1f,  -0.1f,  0.1f,  0.5f, 0.0f, 0.0f,
-0.1f,  -0.1f,  0.1f,  0.5f, 0.0f, 0.0f,
-0.1f,  -0.1f, -0.1f,  0.5f, 0.0f, 0.0f,



//아래
 -0.1f, -0.3f, -0.1f,  1.0f, 0.0f, 0.0f,
 0.1f, -0.3f, -0.1f,  1.0f, 0.0f, 0.0f,
 0.1f,  -0.1f, -0.1f,  1.0f, 0.0f, 0.0f,
 0.1f,  -0.1f, -0.1f,  1.0f, 0.0f, 0.0f,
-0.1f,  -0.1f, -0.1f,  1.0f, 0.0f, 0.0f,
-0.1f, -0.3f, -0.1f,  1.0f, 0.0f, 0.0f,

-0.1f, -0.3f,  0.1f,  0.6f, 0.0f, 0.0f,
 0.1f, -0.3f,  0.1f,  0.6f, 0.0f, 0.0f,
 0.1f,  -0.1f,  0.1f,  0.6f, 0.0f, 0.0f,
 0.1f,  -0.1f,  0.1f,  0.6f, 0.0f, 0.0f,
-0.1f,  -0.1f,  0.1f,  0.6f, 0.0f, 0.0f,
-0.1f, -0.3f,  0.1f,  0.6f, 0.0f, 0.0f,

-0.1f,  -0.1f,  0.1f,  0.8f, 0.0f, 0.0f,
-0.1f,  -0.1f, -0.1f,  0.8f, 0.0f, 0.0f,
-0.1f, -0.3f, -0.1f,  0.8f, 0.0f, 0.0f,
-0.1f, -0.3f, -0.1f,  0.8f, 0.0f, 0.0f,
-0.1f, -0.3f,  0.1f,  0.8f, 0.0f, 0.0f,
-0.1f,  -0.1f,  0.1f,  0.8f, 0.0f, 0.0f,

 0.1f,  -0.1f,  0.1f,  0.7f, 0.0f, 0.0f,
 0.1f,  -0.1f, -0.1f,  0.7f, 0.0f, 0.0f,
 0.1f, -0.3f, -0.1f,  0.7f, 0.0f, 0.0f,
 0.1f, -0.3f, -0.1f,  0.7f, 0.0f, 0.0f,
 0.1f, -0.3f,  0.1f,  0.7f, 0.0f, 0.0f,
 0.1f,  -0.1f,  0.1f,  0.7f, 0.0f, 0.0f,

-0.1f, -0.3f, -0.1f,  0.9f, 0.0f, 0.0f,
 0.1f, -0.3f, -0.1f,  0.9f, 0.0f, 0.0f,
 0.1f, -0.3f,  0.1f,  0.9f, 0.0f, 0.0f,
 0.1f, -0.3f,  0.1f,  0.9f, 0.0f, 0.0f,
-0.1f, -0.3f,  0.1f,  0.9f, 0.0f, 0.0f,
-0.1f, -0.3f, -0.1f,  0.9f, 0.0f, 0.0f,

-0.1f,  -0.1f, -0.1f,  0.5f, 0.0f, 0.0f,
 0.1f,  -0.1f, -0.1f,  0.5f, 0.0f, 0.0f,
 0.1f,  -0.1f,  0.1f,  0.5f, 0.0f, 0.0f,
 0.1f,  -0.1f,  0.1f,  0.5f, 0.0f, 0.0f,
-0.1f,  -0.1f,  0.1f,  0.5f, 0.0f, 0.0f,
-0.1f,  -0.1f, -0.1f,  0.5f, 0.0f, 0.0f,



//좌
-0.3f, -0.1f, -0.1f, 1.0f, 0.0f, 0.0f,
-0.1f, -0.1f, -0.1f, 1.0f, 0.0f, 0.0f,
-0.1f, 0.1f, -0.1f, 1.0f, 0.0f, 0.0f,
-0.1f, 0.1f, -0.1f, 1.0f, 0.0f, 0.0f,
-0.3f, 0.1f, -0.1f, 1.0f, 0.0f, 0.0f,
-0.3f, -0.1f, -0.1f, 1.0f, 0.0f, 0.0f,

-0.3f, -0.1f, 0.1f, 0.6f, 0.0f, 0.0f,
-0.1f, -0.1f, 0.1f, 0.6f, 0.0f, 0.0f,
-0.1f, 0.1f, 0.1f, 0.6f, 0.0f, 0.0f,
-0.1f, 0.1f, 0.1f, 0.6f, 0.0f, 0.0f,
-0.3f, 0.1f, 0.1f, 0.6f, 0.0f, 0.0f,
-0.3f, -0.1f, 0.1f, 0.6f, 0.0f, 0.0f,

-0.3f, 0.1f, 0.1f, 0.8f, 0.0f, 0.0f,
-0.3f, 0.1f, -0.1f, 0.8f, 0.0f, 0.0f,
-0.3f, -0.1f, -0.1f, 0.8f, 0.0f, 0.0f,
-0.3f, -0.1f, -0.1f, 0.8f, 0.0f, 0.0f,
-0.3f, -0.1f, 0.1f, 0.8f, 0.0f, 0.0f,
-0.3f, 0.1f, 0.1f, 0.8f, 0.0f, 0.0f,

-0.1f, 0.1f, 0.1f, 0.7f, 0.0f, 0.0f,
-0.1f, 0.1f, -0.1f, 0.7f, 0.0f, 0.0f,
-0.1f, -0.1f, -0.1f, 0.7f, 0.0f, 0.0f,
-0.1f, -0.1f, -0.1f, 0.7f, 0.0f, 0.0f,
-0.1f, -0.1f, 0.1f, 0.7f, 0.0f, 0.0f,
-0.1f, 0.1f, 0.1f, 0.7f, 0.0f, 0.0f,

-0.3f, -0.1f, -0.1f, 0.9f, 0.0f, 0.0f,
-0.1f, -0.1f, -0.1f, 0.9f, 0.0f, 0.0f,
-0.1f, -0.1f, 0.1f, 0.9f, 0.0f, 0.0f,
-0.1f, -0.1f, 0.1f, 0.9f, 0.0f, 0.0f,
-0.3f, -0.1f, 0.1f, 0.9f, 0.0f, 0.0f,
-0.3f, -0.1f, -0.1f, 0.9f, 0.0f, 0.0f,

-0.3f, 0.1f, -0.1f, 0.5f, 0.0f, 0.0f,
-0.1f, 0.1f, -0.1f, 0.5f, 0.0f, 0.0f,
-0.1f, 0.1f, 0.1f, 0.5f, 0.0f, 0.0f,
-0.1f, 0.1f, 0.1f, 0.5f, 0.0f, 0.0f,
-0.3f, 0.1f, 0.1f, 0.5f, 0.0f, 0.0f,
-0.3f, 0.1f, -0.1f, 0.5f, 0.0f, 0.0f,


//우
0.1f, -0.1f, -0.1f, 1.0f, 0.0f, 0.0f,
0.3f, -0.1f, -0.1f, 1.0f, 0.0f, 0.0f,
0.3f, 0.1f, -0.1f, 1.0f, 0.0f, 0.0f,
0.3f, 0.1f, -0.1f, 1.0f, 0.0f, 0.0f,
0.1f, 0.1f, -0.1f, 1.0f, 0.0f, 0.0f,
0.1f, -0.1f, -0.1f, 1.0f, 0.0f, 0.0f,

0.1f, -0.1f, 0.1f, 0.6f, 0.0f, 0.0f,
0.3f, -0.1f, 0.1f, 0.6f, 0.0f, 0.0f,
0.3f, 0.1f, 0.1f, 0.6f, 0.0f, 0.0f,
0.3f, 0.1f, 0.1f, 0.6f, 0.0f, 0.0f,
0.1f, 0.1f, 0.1f, 0.6f, 0.0f, 0.0f,
0.1f, -0.1f, 0.1f, 0.6f, 0.0f, 0.0f,

0.1f, 0.1f, 0.1f, 0.8f, 0.0f, 0.0f,
0.1f, 0.1f, -0.1f, 0.8f, 0.0f, 0.0f,
0.1f, -0.1f, -0.1f, 0.8f, 0.0f, 0.0f,
0.1f, -0.1f, -0.1f, 0.8f, 0.0f, 0.0f,
0.1f, -0.1f, 0.1f, 0.8f, 0.0f, 0.0f,
0.1f, 0.1f, 0.1f, 0.8f, 0.0f, 0.0f,

0.3f, 0.1f, 0.1f, 0.7f, 0.0f, 0.0f,
0.3f, 0.1f, -0.1f, 0.7f, 0.0f, 0.0f,
0.3f, -0.1f, -0.1f, 0.7f, 0.0f, 0.0f,
0.3f, -0.1f, -0.1f, 0.7f, 0.0f, 0.0f,
0.3f, -0.1f, 0.1f, 0.7f, 0.0f, 0.0f,
0.3f, 0.1f, 0.1f, 0.7f, 0.0f, 0.0f,

0.1f, -0.1f, -0.1f, 0.9f, 0.0f, 0.0f,
0.3f, -0.1f, -0.1f, 0.9f, 0.0f, 0.0f,
0.3f, -0.1f, 0.1f, 0.9f, 0.0f, 0.0f,
0.3f, -0.1f, 0.1f, 0.9f, 0.0f, 0.0f,
0.1f, -0.1f, 0.1f, 0.9f, 0.0f, 0.0f,
0.1f, -0.1f, -0.1f, 0.9f, 0.0f, 0.0f,

0.1f, 0.1f, -0.1f, 0.5f, 0.0f, 0.0f,
0.3f, 0.1f, -0.1f, 0.5f, 0.0f, 0.0f,
0.3f, 0.1f, 0.1f, 0.5f, 0.0f, 0.0f,
0.3f, 0.1f, 0.1f, 0.5f, 0.0f, 0.0f,
0.1f, 0.1f, 0.1f, 0.5f, 0.0f, 0.0f,
0.1f, 0.1f, -0.1f, 0.5f, 0.0f, 0.0f
        };

        verticesSize = sizeof(vertices1);
        int size1 = sizeof(vertices1) / sizeof(float);

        //if (vertices != nullptr)
        //    delete vertices;

        this->vertices = new float[size1];

        for (int i = 0; i < size1; i++)
            this->vertices[i] = vertices1[i];



        break;
    }

    case BLUE: { // 1자
        float vertices2[] = {
            //가운데
-0.1f, -0.1f, -0.1f,  0.0f, 0.0f, 1.0f,
 0.1f, -0.1f, -0.1f,  0.0f, 0.0f, 1.0f,
 0.1f,  0.1f, -0.1f,  0.0f, 0.0f, 1.0f,
 0.1f,  0.1f, -0.1f,  0.0f, 0.0f, 1.0f,
-0.1f,  0.1f, -0.1f,  0.0f, 0.0f, 1.0f,
-0.1f, -0.1f, -0.1f,  0.0f, 0.0f, 1.0f,

-0.1f, -0.1f,  0.1f,  0.0f, 0.0f, 0.9f,
 0.1f, -0.1f,  0.1f,  0.0f, 0.0f, 0.9f,
 0.1f,  0.1f,  0.1f,  0.0f, 0.0f, 0.9f,
 0.1f,  0.1f,  0.1f,  0.0f, 0.0f, 0.9f,
-0.1f,  0.1f,  0.1f,  0.0f, 0.0f, 0.9f,
-0.1f, -0.1f,  0.1f,  0.0f, 0.0f, 0.9f,

-0.1f,  0.1f,  0.1f,  0.0f, 0.0f, 0.8f,
-0.1f,  0.1f, -0.1f,  0.0f, 0.0f, 0.8f,
-0.1f, -0.1f, -0.1f,  0.0f, 0.0f, 0.8f,
-0.1f, -0.1f, -0.1f,  0.0f, 0.0f, 0.8f,
-0.1f, -0.1f,  0.1f,  0.0f, 0.0f, 0.8f,
-0.1f,  0.1f,  0.1f,  0.0f, 0.0f, 0.8f,

 0.1f,  0.1f,  0.1f,  0.0f, 0.0f, 0.7f,
 0.1f,  0.1f, -0.1f,  0.0f, 0.0f, 0.7f,
 0.1f, -0.1f, -0.1f,  0.0f, 0.0f, 0.7f,
 0.1f, -0.1f, -0.1f,  0.0f, 0.0f, 0.7f,
 0.1f, -0.1f,  0.1f,  0.0f, 0.0f, 0.7f,
 0.1f,  0.1f,  0.1f,  0.0f, 0.0f, 0.7f,

-0.1f, -0.1f, -0.1f,  0.0f, 0.0f, 0.6f,
 0.1f, -0.1f, -0.1f,  0.0f, 0.0f, 0.6f,
 0.1f, -0.1f,  0.1f,  0.0f, 0.0f, 0.6f,
 0.1f, -0.1f,  0.1f,  0.0f, 0.0f, 0.6f,
-0.1f, -0.1f,  0.1f,  0.0f, 0.0f, 0.6f,
-0.1f, -0.1f, -0.1f,  0.0f, 0.0f, 0.6f,

-0.1f,  0.1f, -0.1f,  0.0f, 0.0f, 0.5f,
 0.1f,  0.1f, -0.1f,  0.0f, 0.0f, 0.5f,
 0.1f,  0.1f,  0.1f,  0.0f, 0.0f, 0.5f,
 0.1f,  0.1f,  0.1f,  0.0f, 0.0f, 0.5f,
-0.1f,  0.1f,  0.1f,  0.0f, 0.0f, 0.5f,
-0.1f,  0.1f, -0.1f,  0.0f, 0.0f, 0.5f,


//위
-0.1f, 0.1f, -0.1f,  0.0f, 0.0f, 1.0f,
 0.1f, 0.1f, -0.1f,  0.0f, 0.0f, 1.0f,
 0.1f,  0.3f, -0.1f,  0.0f, 0.0f, 1.0f,
 0.1f,  0.3f, -0.1f,  0.0f, 0.0f, 1.0f,
-0.1f,  0.3f, -0.1f,  0.0f, 0.0f, 1.0f,
-0.1f, -0.3f, -0.1f,  0.0f, 0.0f, 1.0f,

-0.1f, 0.1f,  0.1f,  0.0f, 0.0f, 0.9f,
 0.1f, 0.1f,  0.1f,  0.0f, 0.0f, 0.9f,
 0.1f,  0.3f,  0.1f,  0.0f, 0.0f, 0.9f,
 0.1f,  0.3f,  0.1f,  0.0f, 0.0f, 0.9f,
-0.1f,  0.3f,  0.1f,  0.0f, 0.0f, 0.9f,
-0.1f, 0.1f,  0.1f,  0.0f, 0.0f, 0.9f,

-0.1f,  0.3f,  0.1f,  0.0f, 0.0f, 0.8f,
-0.1f,  0.3f, -0.1f,  0.0f, 0.0f, 0.8f,
-0.1f, 0.1f, -0.1f,  0.0f, 0.0f, 0.8f,
-0.1f, 0.1f, -0.1f,  0.0f, 0.0f, 0.8f,
-0.1f, 0.1f,  0.1f,  0.0f, 0.0f, 0.8f,
-0.1f,  0.3f,  0.1f,  0.0f, 0.0f, 0.8f,

 0.1f,  0.3f,  0.1f,  0.0f, 0.0f, 0.7f,
 0.1f,  0.3f, -0.1f,  0.0f, 0.0f, 0.7f,
 0.1f, 0.1f, -0.1f,  0.0f, 0.0f, 0.7f,
 0.1f, 0.1f, -0.1f,  0.0f, 0.0f, 0.7f,
 0.1f, 0.1f,  0.1f,  0.0f, 0.0f, 0.7f,
 0.1f,  0.3f,  0.1f,  0.0f, 0.0f, 0.7f,

-0.1f, -0.1f, -0.1f,  0.0f, 0.0f, 0.6f,
 0.1f, -0.1f, -0.1f,  0.0f, 0.0f, 0.6f,
 0.1f, -0.1f,  0.1f,  0.0f, 0.0f, 0.6f,
 0.1f, -0.1f,  0.1f,  0.0f, 0.0f, 0.6f,
-0.1f, -0.1f,  0.1f,  0.0f, 0.0f, 0.6f,
-0.1f, -0.1f, -0.1f,  0.0f, 0.0f, 0.6f,

-0.1f,  0.1f, -0.1f,  0.0f, 0.0f, 0.5f,
 0.1f,  0.1f, -0.1f,  0.0f, 0.0f, 0.5f,
 0.1f,  0.1f,  0.1f,  0.0f, 0.0f, 0.5f,
 0.1f,  0.1f,  0.1f,  0.0f, 0.0f, 0.5f,
-0.1f,  0.1f,  0.1f,  0.0f, 0.0f, 0.5f,
-0.1f,  0.1f, -0.1f,  0.0f, 0.0f, 0.5f,


//아래
-0.1f, -0.3f, -0.1f,  0.0f, 0.0f, 1.0f,
 0.1f, -0.3f, -0.1f,  0.0f, 0.0f, 1.0f,
 0.1f,  -0.1f, -0.1f,  0.0f, 0.0f, 1.0f,
 0.1f,  -0.1f, -0.1f,  0.0f, 0.0f, 1.0f,
-0.1f,  -0.1f, -0.1f,  0.0f, 0.0f, 1.0f,
-0.1f, -0.3f, -0.1f,  0.0f, 0.0f, 1.0f,

-0.1f, -0.3f,  0.1f,  0.0f, 0.0f, 0.9f,
 0.1f, -0.3f,  0.1f,  0.0f, 0.0f, 0.9f,
 0.1f,  -0.1f,  0.1f,  0.0f, 0.0f, 0.9f,
 0.1f,  -0.1f,  0.1f,  0.0f, 0.0f, 0.9f,
-0.1f,  -0.1f,  0.1f,  0.0f, 0.0f, 0.9f,
-0.1f, -0.3f,  0.1f,  0.0f, 0.0f, 0.9f,

-0.1f,  -0.1f,  0.1f,  0.0f, 0.0f, 0.8f,
-0.1f,  -0.1f, -0.1f,  0.0f, 0.0f, 0.8f,
-0.1f, -0.3f, -0.1f,  0.0f, 0.0f, 0.8f,
-0.1f, -0.3f, -0.1f,  0.0f, 0.0f, 0.8f,
-0.1f, -0.3f,  0.1f,  0.0f, 0.0f, 0.8f,
-0.1f,  -0.1f,  0.1f,  0.0f, 0.0f, 0.8f,

 0.1f,  -0.1f,  0.1f,  0.0f, 0.0f, 0.7f,
 0.1f,  -0.1f, -0.1f,  0.0f, 0.0f, 0.7f,
 0.1f, -0.3f, -0.1f,  0.0f, 0.0f, 0.7f,
 0.1f, -0.3f, -0.1f,  0.0f, 0.0f, 0.7f,
 0.1f, -0.3f,  0.1f,  0.0f, 0.0f, 0.7f,
 0.1f,  -0.1f,  0.1f,  0.0f, 0.0f, 0.7f,

-0.1f, -0.3f, -0.1f,  0.0f, 0.0f, 0.6f,
 0.1f, -0.3f, -0.1f,  0.0f, 0.0f, 0.6f,
 0.1f, -0.3f,  0.1f,  0.0f, 0.0f, 0.6f,
 0.1f, -0.3f,  0.1f,  0.0f, 0.0f, 0.6f,
-0.1f, -0.3f,  0.1f,  0.0f, 0.0f, 0.6f,
-0.1f, -0.3f, -0.1f,  0.0f, 0.0f, 0.6f,

-0.1f,  -0.1f, -0.1f,  0.0f, 0.0f, 0.5f,
 0.1f,  -0.1f, -0.1f,  0.0f, 0.0f, 0.5f,
 0.1f,  -0.1f,  0.1f,  0.0f, 0.0f, 0.5f,
 0.1f,  -0.1f,  0.1f,  0.0f, 0.0f, 0.5f,
-0.1f,  -0.1f,  0.1f,  0.0f, 0.0f, 0.5f,
-0.1f,  -0.1f, -0.1f,  0.0f, 0.0f, 0.5f



        };

        verticesSize = sizeof(vertices2);

        int size2 = sizeof(vertices2) / sizeof(float);

        //if (vertices != nullptr)
        //    delete vertices;

        this->vertices = new float[size2];

        for (int i = 0; i < size2; i++)
            this->vertices[i] = vertices2[i];



        break;
    }

    case YELLOW: {//가운데 뚫린 +
        float vertices3[] = {
            //가운데


//상
 -0.1f, 0.1f, -0.1f,  1.0f, 1.0f, 0.0f,
 0.1f, 0.1f, -0.1f,  1.0f, 1.0f, 0.0f,
 0.1f,  0.3f, -0.1f,  1.0f, 1.0f, 0.0f,
 0.1f,  0.3f, -0.1f,  1.0f, 1.0f, 0.0f,
-0.1f,  0.3f, -0.1f,  1.0f, 1.0f, 0.0f,
-0.1f, -0.3f, -0.1f,  1.0f, 1.0f, 0.0f,

-0.1f, 0.1f,  0.1f,  0.6f, 0.6f, 0.0f,
 0.1f, 0.1f,  0.1f,  0.6f, 0.6f, 0.0f,
 0.1f,  0.3f,  0.1f,  0.6f, 0.6f, 0.0f,
 0.1f,  0.3f,  0.1f,  0.6f, 0.6f, 0.0f,
-0.1f,  0.3f,  0.1f,  0.6f, 0.6f, 0.0f,
-0.1f, 0.1f,  0.1f,  0.6f, 0.6f, 0.0f,

-0.1f,  0.3f,  0.1f,  0.8f, 0.8f, 0.0f,
-0.1f,  0.3f, -0.1f,  0.8f, 0.8f, 0.0f,
-0.1f, 0.3f, -0.1f,  0.8f, 0.8f, 0.0f,
-0.1f, 0.1f, -0.1f,  0.8f, 0.8f, 0.0f,
-0.1f, 0.1f,  0.1f,  0.8f, 0.8f, 0.0f,
-0.1f,  0.3f,  0.1f,  0.8f, 0.8f, 0.0f,

 0.1f,  0.3f,  0.1f,  0.7f, 0.7f, 0.0f,
 0.1f,  0.3f, -0.1f,  0.7f, 0.7f, 0.0f,
 0.1f, 0.1f, -0.1f,  0.7f, 0.7f, 0.0f,
 0.1f, 0.1f, -0.1f,  0.7f, 0.7f, 0.0f,
 0.1f, 0.1f,  0.1f,  0.7f, 0.7f, 0.0f,
 0.1f,  0.1f,  0.1f,  0.7f, 0.7f, 0.0f,

-0.1f, 0.1f, -0.1f,  0.9f, 0.9f, 0.0f,
 0.1f, 0.1f, -0.1f,  0.9f, 0.9f, 0.0f,
 0.1f, 0.1f,  0.1f,  0.9f, 0.9f, 0.0f,
 0.1f, 0.1f,  0.1f,  0.9f, 0.9f, 0.0f,
-0.1f, 0.1f,  0.1f,  0.9f, 0.9f, 0.0f,
-0.1f, 0.1f, -0.1f,  0.9f, 0.9f, 0.0f,

-0.1f,  0.3f, -0.1f,  0.5f, 0.5f, 0.0f,
 0.1f,  0.3f, -0.1f,  0.5f, 0.5f, 0.0f,
 0.1f,  0.3f,  0.1f,  0.5f, 0.5f, 0.0f,
 0.1f,  0.3f,  0.1f,  0.5f, 0.5f, 0.0f,
-0.1f,  0.3f,  0.1f,  0.5f, 0.5f, 0.0f,
-0.1f,  0.3f, -0.1f,  0.5f, 0.5f, 0.0f,


//하
 -0.1f, -0.3f, -0.1f,  1.0f, 1.0f, 0.0f,
 0.1f, -0.3f, -0.1f,  1.0f, 1.0f, 0.0f,
 0.1f,  -0.1f, -0.1f,  1.0f, 1.0f, 0.0f,
 0.1f,  -0.1f, -0.1f,  1.0f, 1.0f, 0.0f,
-0.1f,  -0.1f, -0.1f,  1.0f, 1.0f, 0.0f,
-0.1f, -0.3f, -0.1f,  1.0f, 1.0f, 0.0f,

-0.1f, -0.3f,  0.1f,  0.6f, 0.6f, 0.0f,
 0.1f, -0.3f,  0.1f,  0.6f, 0.6f, 0.0f,
 0.1f,  -0.1f,  0.1f,  0.6f, 0.6f, 0.0f,
 0.1f,  -0.1f,  0.1f,  0.6f, 0.6f, 0.0f,
-0.1f,  -0.1f,  0.1f,  0.6f, 0.6f, 0.0f,
-0.1f, -0.3f,  0.1f,  0.6f, 0.6f, 0.0f,

-0.1f,  -0.1f,  0.1f,  0.8f, 0.8f, 0.0f,
-0.1f,  -0.1f, -0.1f,  0.8f, 0.8f, 0.0f,
-0.1f, -0.3f, -0.1f,  0.8f, 0.8f, 0.0f,
-0.1f, -0.3f, -0.1f,  0.8f, 0.8f, 0.0f,
-0.1f, -0.3f,  0.1f,  0.8f, 0.8f, 0.0f,
-0.1f,  -0.1f,  0.1f,  0.8f, 0.8f, 0.0f,

 0.1f,  -0.1f,  0.1f,  0.7f, 0.7f, 0.0f,
 0.1f,  -0.1f, -0.1f,  0.7f, 0.7f, 0.0f,
 0.1f, -0.3f, -0.1f,  0.7f, 0.7f, 0.0f,
 0.1f, -0.3f, -0.1f,  0.7f, 0.7f, 0.0f,
 0.1f, -0.3f,  0.1f,  0.7f, 0.7f, 0.0f,
 0.1f,  -0.1f,  0.1f,  0.7f, 0.7f, 0.0f,

-0.1f, -0.3f, -0.1f,  0.9f, 0.9f, 0.0f,
 0.1f, -0.3f, -0.1f,  0.9f, 0.9f, 0.0f,
 0.1f, -0.3f,  0.1f,  0.9f, 0.9f, 0.0f,
 0.1f, -0.3f,  0.1f,  0.9f, 0.9f, 0.0f,
-0.1f, -0.3f,  0.1f,  0.9f, 0.9f, 0.0f,
-0.1f, -0.3f, -0.1f,  0.9f, 0.9f, 0.0f,

-0.1f,  -0.1f, -0.1f,  0.5f, 0.5f, 0.0f,
 0.1f,  -0.1f, -0.1f,  0.5f, 0.5f, 0.0f,
 0.1f,  -0.1f,  0.1f,  0.5f, 0.5f, 0.0f,
 0.1f,  -0.1f,  0.1f,  0.5f, 0.5f, 0.0f,
-0.1f,  -0.1f,  0.1f,  0.5f, 0.5f, 0.0f,
-0.1f,  -0.1f, -0.1f,  0.5f, 0.5f, 0.0f,


//좌
-0.3f, -0.1f, -0.1f, 1.0f, 1.0f, 0.0f,
-0.1f, -0.1f, -0.1f, 1.0f, 1.0f, 0.0f,
-0.1f, 0.1f, -0.1f, 1.0f, 1.0f, 0.0f,
-0.1f, 0.1f, -0.1f, 1.0f, 1.0f, 0.0f,
-0.3f, 0.1f, -0.1f, 1.0f, 1.0f, 0.0f,
-0.3f, -0.1f, -0.1f, 1.0f, 1.0f, 0.0f,

-0.3f, -0.1f, 0.1f, 0.6f, 0.6f, 0.0f,
-0.1f, -0.1f, 0.1f, 0.6f, 0.6f, 0.0f,
-0.1f, 0.1f, 0.1f, 0.6f, 0.6f, 0.0f,
-0.1f, 0.1f, 0.1f, 0.6f, 0.6f, 0.0f,
-0.3f, 0.1f, 0.1f, 0.6f, 0.6f, 0.0f,
-0.3f, -0.1f, 0.1f, 0.6f, 0.6f, 0.0f,

-0.3f, 0.1f, 0.1f, 0.8f, 0.8f, 0.0f,
-0.3f, 0.1f, -0.1f, 0.8f, 0.8f, 0.0f,
-0.3f, -0.1f, -0.1f, 0.8f, 0.8f, 0.0f,
-0.3f, -0.1f, -0.1f, 0.8f, 0.8f, 0.0f,
-0.3f, -0.1f, 0.1f, 0.8f, 0.8f, 0.0f,
-0.3f, 0.1f, 0.1f, 0.8f, 0.8f, 0.0f,

-0.1f, 0.1f, 0.1f, 0.7f, 0.7f, 0.0f,
-0.1f, 0.1f, -0.1f, 0.7f, 0.7f, 0.0f,
-0.1f, -0.1f, -0.1f, 0.7f, 0.7f, 0.0f,
-0.1f, -0.1f, -0.1f, 0.7f, 0.7f, 0.0f,
-0.1f, -0.1f, 0.1f, 0.7f, 0.7f, 0.0f,
-0.1f, 0.1f, 0.1f, 0.7f, 0.7f, 0.0f,

-0.3f, -0.1f, -0.1f, 0.9f, 0.9f, 0.0f,
-0.1f, -0.1f, -0.1f, 0.9f, 0.9f, 0.0f,
-0.1f, -0.1f, 0.1f, 0.9f, 0.9f, 0.0f,
-0.1f, -0.1f, 0.1f, 0.9f, 0.9f, 0.0f,
-0.3f, -0.1f, 0.1f, 0.9f, 0.9f, 0.0f,
-0.3f, -0.1f, -0.1f, 0.9f, 0.9f, 0.0f,

-0.3f, 0.1f, -0.1f, 0.5f, 0.5f, 0.0f,
-0.1f, 0.1f, -0.1f, 0.5f, 0.5f, 0.0f,
-0.1f, 0.1f, 0.1f, 0.5f, 0.5f, 0.0f,
-0.1f, 0.1f, 0.1f, 0.5f, 0.5f, 0.0f,
-0.3f, 0.1f, 0.1f, 0.5f, 0.5f, 0.0f,
-0.3f, 0.1f, -0.1f, 0.5f, 0.5f, 0.0f,




//우
 0.1f, -0.1f, -0.1f,  1.0f, 1.0f, 0.0f,
 0.3f, -0.1f, -0.1f,  1.0f, 1.0f, 0.0f,
 0.3f,  0.1f, -0.1f,  1.0f, 1.0f, 0.0f,
 0.3f,  0.1f, -0.1f,  1.0f, 1.0f, 0.0f,
0.1f,  0.1f, -0.1f,  1.0f, 1.0f, 0.0f,
0.1f, -0.1f, -0.1f,  1.0f, 1.0f, 0.0f,

0.1f, -0.1f,  0.1f,  0.6f, 0.6f, 0.0f,
 0.3f, -0.1f,  0.1f,  0.6f, 0.6f, 0.0f,
 0.3f,  0.1f,  0.1f,  0.6f, 0.6f, 0.0f,
 0.3f,  0.1f,  0.1f,  0.6f, 0.6f, 0.0f,
0.1f,  0.1f,  0.1f,  0.6f, 0.6f, 0.0f,
0.1f, -0.1f,  0.1f,  0.6f, 0.6f, 0.0f,

0.1f,  0.1f,  0.1f,  0.8f, 0.8f, 0.0f,
0.1f,  0.1f, -0.1f,  0.8f, 0.8f, 0.0f,
0.1f, -0.1f, -0.1f,  0.8f, 0.8f, 0.0f,
0.1f, -0.1f, -0.1f,  0.8f, 0.8f, 0.0f,
0.1f, -0.1f,  0.1f,  0.8f, 0.8f, 0.0f,
0.1f,  0.1f,  0.1f,  0.8f, 0.8f, 0.0f,

 0.3f,  0.1f,  0.1f,  0.7f, 0.7f, 0.0f,
 0.3f,  0.1f, -0.1f,  0.7f, 0.7f, 0.0f,
 0.3f, -0.1f, -0.1f,  0.7f, 0.7f, 0.0f,
 0.3f, -0.1f, -0.1f,  0.7f, 0.7f, 0.0f,
 0.3f, -0.1f,  0.1f,  0.7f, 0.7f, 0.0f,
 0.3f,  0.1f,  0.1f,  0.7f, 0.7f, 0.0f,

0.1f, -0.1f, -0.1f,  0.9f, 0.9f, 0.0f,
 0.3f, -0.1f, -0.1f,  0.9f, 0.9f, 0.0f,
 0.3f, -0.1f,  0.1f,  0.9f, 0.9f, 0.0f,
 0.3f, -0.1f,  0.1f,  0.9f, 0.9f, 0.0f,
0.1f, -0.1f,  0.1f,  0.9f, 0.9f, 0.0f,
0.1f, -0.1f, -0.1f,  0.9f, 0.9f, 0.0f,

0.1f,  0.1f, -0.1f,  0.5f, 0.5f, 0.0f,
 0.3f,  0.1f, -0.1f,  0.5f, 0.5f, 0.0f,
 0.3f,  0.1f,  0.1f,  0.5f, 0.5f, 0.0f,
 0.3f,  0.1f,  0.1f,  0.5f, 0.5f, 0.0f,
0.1f,  0.1f,  0.1f,  0.5f, 0.5f, 0.0f,
0.1f,  0.1f, -0.1f,  0.5f, 0.5f, 0.0f
        };

        verticesSize = sizeof(vertices3);

        int size3 = sizeof(vertices3) / sizeof(float);

        //if (vertices != nullptr)
        //    delete vertices;

        this->vertices = new float[size3];

        for (int i = 0; i < size3; i++)
            this->vertices[i] = vertices3[i];



        break;
    }

    case GREEN: {//ㄹ
        float vertices4[] = {
            //가운데
-0.1f, -0.1f, -0.1f,  0.0f, 1.0f, .0f,
 0.1f, -0.1f, -0.1f,  0.0f, 1.0f, .0f,
 0.1f,  0.1f, -0.1f,  0.0f, 1.0f, .0f,
 0.1f,  0.1f, -0.1f,  0.0f, 1.0f, .0f,
-0.1f,  0.1f, -0.1f,  0.0f, 1.0f, .0f,
-0.1f, -0.1f, -0.1f,  0.0f, 1.0f, .0f,

-0.1f, -0.1f,  0.1f,  0.0f, .9f, .0f,
 0.1f, -0.1f,  0.1f,  0.0f, .9f, .0f,
 0.1f,  0.1f,  0.1f,  0.0f, .9f, .0f,
 0.1f,  0.1f,  0.1f,  0.0f, .9f, .0f,
-0.1f,  0.1f,  0.1f,  0.0f, .9f, .0f,
-0.1f, -0.1f,  0.1f,  0.0f, .9f, .0f,

-0.1f,  0.1f,  0.1f,  .0f, .8f, .0f,
-0.1f,  0.1f, -0.1f,  .0f, .8f, .0f,
-0.1f, -0.1f, -0.1f,  0.0f, .8f, .0f,
-0.1f, -0.1f, -0.1f,  0.0f, .8f, .0f,
-0.1f, -0.1f,  0.1f,  0.0f, .8f, .0f,
-0.1f,  0.1f,  0.1f,  .0f, .8f, .0f,

 0.1f,  0.1f,  0.1f,  .0f, 0.7f, .0f,
 0.1f,  0.1f, -0.1f,  .0f, .7f, .0f,
 0.1f, -0.1f, -0.1f,  .0f, .7f, .0f,
 0.1f, -0.1f, -0.1f,  .0f, .7f, .0f,
 0.1f, -0.1f,  0.1f,  .0f, 0.7f, .0f,
 0.1f,  0.1f,  0.1f,  .0f, 0.7f, .0f,

-0.1f, -0.1f, -0.1f,  0.0f, .6f, .0f,
 0.1f, -0.1f, -0.1f,  .0f, .6f, .0f,
 0.1f, -0.1f,  0.1f,  .0f, 0.6f, .0f,
 0.1f, -0.1f,  0.1f,  .0f, 0.6f, .0f,
-0.1f, -0.1f,  0.1f,  0.0f, 0.6f, .0f,
-0.1f, -0.1f, -0.1f,  0.0f, .6f, .0f,

-0.1f,  0.1f, -0.1f,  0.0f, .5f, .0f,
 0.1f,  0.1f, -0.1f,  .0f, .5f, .0f,
 0.1f,  0.1f,  0.1f,  .0f, .5f, .0f,
 0.1f,  0.1f,  0.1f,  .0f, .5f, .0f,
-0.1f,  0.1f,  0.1f,  0.0f, .5f, .0f,
-0.1f,  0.1f, -0.1f,  0.0f, .5f, .0f,

//위
-0.1f, 0.1f, -0.1f,  0.0f, 1.0f, .0f,
 0.1f, 0.1f, -0.1f,  0.0f, 1.0f, .0f,
 0.1f,  0.3f, -0.1f,  0.0f, 1.0f, .0f,
 0.1f,  0.3f, -0.1f,  0.0f, 1.0f, .0f,
-0.1f,  0.3f, -0.1f,  0.0f, 1.0f, .0f,
-0.1f, 0.1f, -0.1f,  0.0f, 1.0f, .0f,

-0.1f, 0.1f,  0.1f,  0.0f, .9f, .0f,
 0.1f, 0.1f,  0.1f,  0.0f, .9f, .0f,
 0.1f,  0.3f,  0.1f,  0.0f, .9f, .0f,
 0.1f,  0.3f,  0.1f,  0.0f, .9f, .0f,
-0.1f,  0.3f,  0.1f,  0.0f, .9f, .0f,
-0.1f, 0.1f,  0.1f,  0.0f, .9f, .0f,

-0.1f,  0.3f,  0.1f,  .0f, .8f, .0f,
-0.1f,  0.3f, -0.1f,  .0f, .8f, .0f,
-0.1f, 0.1f, -0.1f,  0.0f, .8f, .0f,
-0.1f, 0.1f, -0.1f,  0.0f, .8f, .0f,
-0.1f, 0.1f,  0.1f,  0.0f, .8f, .0f,
-0.1f,  0.3f,  0.1f,  .0f, .8f, .0f,

 0.1f,  0.3f,  0.1f,  .0f, 0.7f, .0f,
 0.1f,  0.3f, -0.1f,  .0f, .7f, .0f,
 0.1f, 0.1f, -0.1f,  .0f, .7f, .0f,
 0.1f, 0.1f, -0.1f,  .0f, .7f, .0f,
 0.1f, 0.1f,  0.1f,  .0f, 0.7f, .0f,
 0.1f,  0.3f,  0.1f,  .0f, 0.7f, .0f,

-0.1f, 0.1f, -0.1f,  0.0f, .6f, .0f,
 0.1f, 0.1f, -0.1f,  .0f, .6f, .0f,
 0.1f, 0.1f,  0.1f,  .0f, 0.6f, .0f,
 0.1f, 0.1f,  0.1f,  .0f, 0.6f, .0f,
-0.1f, 0.1f,  0.1f,  0.0f, 0.6f, .0f,
-0.1f, 0.1f, -0.1f,  0.0f, .6f, .0f,

-0.1f,  0.3f, -0.1f,  0.0f, .5f, .0f,
 0.1f,  0.3f, -0.1f,  .0f, .5f, .0f,
 0.1f,  0.3f,  0.1f,  .0f, .5f, .0f,
 0.1f,  0.3f,  0.1f,  .0f, .5f, .0f,
-0.1f,  0.3f,  0.1f,  0.0f, .5f, .0f,
-0.1f,  0.3f, -0.1f,  0.0f, .5f, .0f,


//위-좌
0.1f, 0.1f, -0.1f,  0.0f, 1.0f, .0f,
 0.3f, 0.1f, -0.1f,  0.0f, 1.0f, .0f,
 0.3f,  0.3f, -0.1f,  0.0f, 1.0f, .0f,
 0.3f,  0.3f, -0.1f,  0.0f, 1.0f, .0f,
0.1f,  0.3f, -0.1f,  0.0f, 1.0f, .0f,
0.1f, 0.1f, -0.1f,  0.0f, 1.0f, .0f,

0.1f, 0.1f,  0.1f,  0.0f, .9f, .0f,
 0.3f, 0.1f,  0.1f,  0.0f, .9f, .0f,
 0.3f,  0.3f,  0.1f,  0.0f, .9f, .0f,
 0.3f,  0.3f,  0.1f,  0.0f, .9f, .0f,
0.1f,  0.3f,  0.1f,  0.0f, .9f, .0f,
0.1f, 0.1f,  0.1f,  0.0f, .9f, .0f,

0.1f,  0.3f,  0.1f,  .0f, .8f, .0f,
0.1f,  0.3f, -0.1f,  .0f, .8f, .0f,
0.1f, 0.1f, -0.1f,  0.0f, .8f, .0f,
0.1f, 0.1f, -0.1f,  0.0f, .8f, .0f,
0.1f, 0.1f,  0.1f,  0.0f, .8f, .0f,
0.1f,  0.3f,  0.1f,  .0f, .8f, .0f,

 0.3f,  0.3f,  0.1f,  .0f, 0.7f, .0f,
 0.3f,  0.3f, -0.1f,  .0f, .7f, .0f,
 0.3f, 0.1f, -0.1f,  .0f, .7f, .0f,
 0.3f, 0.1f, -0.1f,  .0f, .7f, .0f,
 0.3f, 0.1f,  0.1f,  .0f, 0.7f, .0f,
 0.3f,  0.3f,  0.1f,  .0f, 0.7f, .0f,

0.1f, 0.1f, -0.1f,  0.0f, .6f, .0f,
 0.3f, 0.1f, -0.1f,  .0f, .6f, .0f,
 0.3f, 0.1f,  0.1f,  .0f, 0.6f, .0f,
 0.3f, 0.1f,  0.1f,  .0f, 0.6f, .0f,
0.1f, 0.1f,  0.1f,  0.0f, 0.6f, .0f,
0.1f, 0.1f, -0.1f,  0.0f, .6f, .0f,

0.1f,  0.3f, -0.1f,  0.0f, .5f, .0f,
 0.3f,  0.3f, -0.1f,  .0f, .5f, .0f,
 0.3f,  0.3f,  0.1f,  .0f, .5f, .0f,
 0.3f,  0.3f,  0.1f,  .0f, .5f, .0f,
0.1f,  0.3f,  0.1f,  0.0f, .5f, .0f,
0.1f,  0.3f, -0.1f,  0.0f, .5f, .0f,

//아래
-0.1f, -0.3f, -0.1f, 0.0f, 1.0f, .0f,
0.1f, -0.3f, -0.1f, 0.0f, 1.0f, .0f,
0.1f, -0.1f, -0.1f, 0.0f, 1.0f, .0f,
0.1f, -0.1f, -0.1f, 0.0f, 1.0f, .0f,
-0.1f, -0.1f, -0.1f, 0.0f, 1.0f, .0f,
-0.1f, -0.3f, -0.1f, 0.0f, 1.0f, .0f,

-0.1f, -0.3f, 0.1f, 0.0f, .9f, .0f,
0.1f, -0.3f, 0.1f, 0.0f, .9f, .0f,
0.1f, -0.1f, 0.1f, 0.0f, .9f, .0f,
0.1f, -0.1f, 0.1f, 0.0f, .9f, .0f,
-0.1f, -0.1f, 0.1f, 0.0f, .9f, .0f,
-0.1f, -0.3f, 0.1f, 0.0f, .9f, .0f,

-0.1f, -0.1f, 0.1f, .0f, .8f, .0f,
-0.1f, -0.1f, -0.1f, .0f, .8f, .0f,
-0.1f, -0.3f, -0.1f, 0.0f, .8f, .0f,
-0.1f, -0.3f, -0.1f, 0.0f, .8f, .0f,
-0.1f, -0.3f, 0.1f, 0.0f, .8f, .0f,
-0.1f, -0.1f, 0.1f, .0f, .8f, .0f,

0.1f, -0.1f, 0.1f, .0f, 0.7f, .0f,
0.1f, -0.1f, -0.1f, .0f, .7f, .0f,
0.1f, -0.3f, -0.1f, .0f, .7f, .0f,
0.1f, -0.3f, -0.1f, .0f, .7f, .0f,
0.1f, -0.3f, 0.1f, .0f, 0.7f, .0f,
0.1f, -0.1f, 0.1f, .0f, 0.7f, .0f,

-0.1f, -0.3f, -0.1f, 0.0f, .6f, .0f,
0.1f, -0.3f, -0.1f, .0f, .6f, .0f,
0.1f, -0.3f, 0.1f, .0f, 0.6f, .0f,
0.1f, -0.3f, 0.1f, .0f, 0.6f, .0f,
-0.1f, -0.3f, 0.1f, 0.0f, 0.6f, .0f,
-0.1f, -0.3f, -0.1f, 0.0f, .6f, .0f,

-0.1f, -0.1f, -0.1f, 0.0f, .5f, .0f,
0.1f, -0.1f, -0.1f, .0f, .5f, .0f,
0.1f, -0.1f, 0.1f, .0f, .5f, .0f,
0.1f, -0.1f, 0.1f, .0f, .5f, .0f,
-0.1f, -0.1f, 0.1f, 0.0f, .5f, .0f,
-0.1f, -0.1f, -0.1f, 0.0f, .5f, .0f,



//아래 오른쪽
0.1f, -0.3f, -0.1f, 0.0f, 1.0f, .0f,
0.3f, -0.3f, -0.1f, 0.0f, 1.0f, .0f,
0.3f, -0.1f, -0.1f, 0.0f, 1.0f, .0f,
0.3f, -0.1f, -0.1f, 0.0f, 1.0f, .0f,
0.1f, -0.1f, -0.1f, 0.0f, 1.0f, .0f,
0.1f, -0.3f, -0.1f, 0.0f, 1.0f, .0f,

0.1f, -0.3f, 0.1f, 0.0f, .9f, .0f,
0.3f, -0.3f, 0.1f, 0.0f, .9f, .0f,
0.3f, -0.1f, 0.1f, 0.0f, .9f, .0f,
0.3f, -0.1f, 0.1f, 0.0f, .9f, .0f,
0.1f, -0.1f, 0.1f, 0.0f, .9f, .0f,
0.1f, -0.3f, 0.1f, 0.0f, .9f, .0f,

0.1f, -0.1f, 0.1f, .0f, .8f, .0f,
0.1f, -0.1f, -0.1f, .0f, .8f, .0f,
0.1f, -0.3f, -0.1f, 0.0f, .8f, .0f,
0.1f, -0.3f, -0.1f, 0.0f, .8f, .0f,
0.1f, -0.3f, 0.1f, 0.0f, .8f, .0f,
0.1f, -0.1f, 0.1f, .0f, .8f, .0f,

0.3f, -0.1f, 0.1f, .0f, 0.7f, .0f,
0.3f, -0.1f, -0.1f, .0f, .7f, .0f,
0.3f, -0.3f, -0.1f, .0f, .7f, .0f,
0.3f, -0.3f, -0.1f, .0f, .7f, .0f,
0.3f, -0.3f, 0.1f, .0f, 0.7f, .0f,
0.3f, -0.1f, 0.1f, .0f, 0.7f, .0f,

0.1f, -0.3f, -0.1f, 0.0f, .6f, .0f,
0.3f, -0.3f, -0.1f, .0f, .6f, .0f,
0.3f, -0.3f, 0.1f, .0f, 0.6f, .0f,
0.3f, -0.3f, 0.1f, .0f, 0.6f, .0f,
0.1f, -0.3f, 0.1f, 0.0f, 0.6f, .0f,
0.1f, -0.3f, -0.1f, 0.0f, .6f, .0f,

0.1f, -0.1f, -0.1f, 0.0f, .5f, .0f,
0.3f, -0.1f, -0.1f, .0f, .5f, .0f,
0.3f, -0.1f, 0.1f, .0f, .5f, .0f,
0.3f, -0.1f, 0.1f, .0f, .5f, .0f,
0.1f, -0.1f, 0.1f, 0.0f, .5f, .0f,
0.1f, -0.1f, -0.1f, 0.0f, .5f, .0f
        };

        verticesSize = sizeof(vertices4);

        int size4 = sizeof(vertices4) / sizeof(float);

        //if (vertices4 != nullptr)
        //    delete vertices;

        this->vertices = new float[size4];

        for (int i = 0; i < size4; i++)
            this->vertices[i] = vertices4[i];




        break;
    }

    default: {
        float vertices5[] = {
-0.1f, -0.1f, -0.1f,  0.0f, 0.0f, 1.0f,
 0.1f, -0.1f, -0.1f,  1.0f, 0.0f, 1.0f,
 0.1f,  0.1f, -0.1f,  1.0f, 1.0f, 1.0f,
 0.1f,  0.1f, -0.1f,  1.0f, 1.0f, 1.0f,
-0.1f,  0.1f, -0.1f,  0.0f, 1.0f, 1.0f,
-0.1f, -0.1f, -0.1f,  0.0f, 0.0f, 1.0f,

-0.1f, -0.1f,  0.1f,  0.0f, 0.0f, 1.0f,
 0.1f, -0.1f,  0.1f,  1.0f, 0.0f, 1.0f,
 0.1f,  0.1f,  0.1f,  1.0f, 1.0f, 1.0f,
 0.1f,  0.1f,  0.1f,  1.0f, 1.0f, 1.0f,
-0.1f,  0.1f,  0.1f,  0.0f, 1.0f, 1.0f,
-0.1f, -0.1f,  0.1f,  0.0f, 0.0f, 1.0f,

-0.1f,  0.1f,  0.1f,  1.0f, 0.0f, 1.0f,
-0.1f,  0.1f, -0.1f,  1.0f, 1.0f, 1.0f,
-0.1f, -0.1f, -0.1f,  0.0f, 1.0f, 1.0f,
-0.1f, -0.1f, -0.1f,  0.0f, 1.0f, 1.0f,
-0.1f, -0.1f,  0.1f,  0.0f, 0.0f, 1.0f,
-0.1f,  0.1f,  0.1f,  1.0f, 0.0f, 1.0f,

 0.1f,  0.1f,  0.1f,  1.0f, 0.0f, 1.0f,
 0.1f,  0.1f, -0.1f,  1.0f, 1.0f, 1.0f,
 0.1f, -0.1f, -0.1f,  0.0f, 1.0f, 1.0f,
 0.1f, -0.1f, -0.1f,  0.0f, 1.0f, 1.0f,
 0.1f, -0.1f,  0.1f,  0.0f, 0.0f, 1.0f,
 0.1f,  0.1f,  0.1f,  1.0f, 0.0f, 1.0f,

-0.1f, -0.1f, -0.1f,  0.0f, 1.0f, 1.0f,
 0.1f, -0.1f, -0.1f,  1.0f, 1.0f, 1.0f,
 0.1f, -0.1f,  0.1f,  1.0f, 0.0f, 1.0f,
 0.1f, -0.1f,  0.1f,  1.0f, 0.0f, 1.0f,
-0.1f, -0.1f,  0.1f,  0.0f, 0.0f, 1.0f,
-0.1f, -0.1f, -0.1f,  0.0f, 1.0f, 1.0f,

-0.1f,  0.1f, -0.1f,  0.0f, 1.0f, 1.0f,
 0.1f,  0.1f, -0.1f,  1.0f, 1.0f, 1.0f,
 0.1f,  0.1f,  0.1f,  1.0f, 0.0f, 1.0f,
 0.1f,  0.1f,  0.1f,  1.0f, 0.0f, 1.0f,
-0.1f,  0.1f,  0.1f,  0.0f, 0.0f, 1.0f,
-0.1f,  0.1f, -0.1f,  0.0f, 1.0f, 1.0f
        };

        verticesSize = sizeof(vertices5);

        int size5 = sizeof(vertices5) / sizeof(float);

        //if (vertices != NULL)
         //   delete vertices;

        this->vertices = new float[size5];

        for (int i = 0; i < size5; i++)
            this->vertices[i] = vertices5[i];

        break;
    }

    }
}


/*



*/